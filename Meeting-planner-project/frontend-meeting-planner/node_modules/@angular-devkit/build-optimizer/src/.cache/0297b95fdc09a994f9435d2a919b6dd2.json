{"remainingRequest":"/home/msc/Desktop/frontend-meeting-planner/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/msc/Desktop/frontend-meeting-planner/node_modules/ng2-cookies/src/services/cookie.js","dependencies":[{"path":"/home/msc/Desktop/frontend-meeting-planner/node_modules/ng2-cookies/src/services/cookie.js","mtime":1463511345000},{"path":"/home/msc/Desktop/frontend-meeting-planner/node_modules/cache-loader/dist/cjs.js","mtime":1535176627252},{"path":"/home/msc/Desktop/frontend-meeting-planner/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * Class Cookie - Holds static functions to deal with Cookies\r\n */\r\nvar Cookie = (function () {\r\n    function Cookie() {\r\n    }\r\n    /**\r\n     * Retrieves a single cookie by it's name\r\n     *\r\n     * @param  {string} name Identification of the Cookie\r\n     * @returns The Cookie's value\r\n     */\r\n    Cookie.get = function (name) {\r\n        var myWindow = window;\r\n        name = myWindow.escape(name);\r\n        var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\r\n        var result = regexp.exec(document.cookie);\r\n        return (result === null) ? null : myWindow.unescape(result[1]);\r\n    };\r\n    /**\r\n     * Retrieves a a list of all cookie avaiable\r\n     *\r\n     * @returns Object with all Cookies\r\n     */\r\n    Cookie.getAll = function () {\r\n        var cookies = {};\r\n        if (document.cookie && document.cookie != '') {\r\n            var split = document.cookie.split(';');\r\n            for (var i = 0; i < split.length; i++) {\r\n                var currCookie = split[i].split('=');\r\n                currCookie[0] = currCookie[0].replace(/^ /, '');\r\n                cookies[decodeURIComponent(currCookie[0])] = decodeURIComponent(currCookie[1]);\r\n            }\r\n        }\r\n        return cookies;\r\n    };\r\n    /**\r\n     * Save the Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} value Cookie's value\r\n     * @param  {number} expires Cookie's expiration date in days from now. If it's undefined the cookie is a session Cookie\r\n     * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n     */\r\n    Cookie.set = function (name, value, expires, path, domain) {\r\n        var myWindow = window;\r\n        var cookieStr = myWindow.escape(name) + '=' + myWindow.escape(value) + ';';\r\n        if (expires) {\r\n            var dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\r\n            cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\r\n        }\r\n        if (path) {\r\n            cookieStr += 'path=' + path + ';';\r\n        }\r\n        if (domain) {\r\n            cookieStr += 'domain=' + domain + ';';\r\n        }\r\n        // console.log(cookieStr);\r\n        document.cookie = cookieStr;\r\n    };\r\n    /**\r\n     * Removes specified Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n     */\r\n    Cookie.delete = function (name, path, domain) {\r\n        // If the cookie exists\r\n        if (Cookie.get(name)) {\r\n            Cookie.set(name, '', -1, path, domain);\r\n        }\r\n    };\r\n    /**\r\n     * Delete all cookie avaiable\r\n     */\r\n    Cookie.deleteAll = function (path, domain) {\r\n        var cookies = Cookie.getAll();\r\n        for (var cookieName in cookies) {\r\n            Cookie.delete(cookieName, path, domain);\r\n        }\r\n    };\r\n    return Cookie;\r\n})();\r\nexports.Cookie = Cookie;\r\n//# sourceMappingURL=cookie.js.map",null]}